/**
 * Example demonstrating how to use the ScrapeGraph AI SDK in mock mode.
 *
 * This example shows how to:
 * 1. Enable mock mode globally or per-request
 * 2. Use custom mock responses
 * 3. Use custom mock handlers
 * 4. Test different endpoints in mock mode
 * 5. Demonstrate environment variable activation
 *
 * Requirements:
 * - Node.js 16+
 * - scrapegraph-js
 *
 * Usage:
 * node mock_mode_example.js
 * 
 * Or with environment variable:
 * SGAI_MOCK=1 node mock_mode_example.js
 */

import { 
  scrape, 
  getScrapeRequest,
  smartScraper,
  getSmartScraperRequest,
  searchScraper,
  getSearchScraperRequest,
  markdownify,
  getMarkdownifyRequest,
  crawl,
  getCrawlRequest,
  agenticScraper,
  getAgenticScraperRequest,
  getCredits,
  sendFeedback
} from '../index.js';

import { 
  initMockConfig, 
  enableMock, 
  disableMock, 
  setMockResponses, 
  setMockHandler 
} from '../src/utils/mockConfig.js';

// Configuration
const API_KEY = process.env.SGAI_API_KEY || 'sgai-00000000-0000-0000-0000-000000000000';

/**
 * Basic mock mode usage demonstration
 */
async function basicMockUsage() {
  console.log('\n=== Basic Mock Usage ===');
  
  // Enable mock mode globally
  enableMock();
  
  try {
    // Test scrape endpoint
    console.log('\n-- Testing scrape endpoint --');
    const scrapeResult = await scrape(API_KEY, 'https://example.com', { renderHeavyJs: true });
    console.log('Scrape result:', scrapeResult);
    
    // Test getScrapeRequest endpoint
    console.log('\n-- Testing getScrapeRequest endpoint --');
    const scrapeStatus = await getScrapeRequest(API_KEY, 'mock-request-id');
    console.log('Scrape status:', scrapeStatus);
    
    // Test smartScraper endpoint
    console.log('\n-- Testing smartScraper endpoint --');
    const smartResult = await smartScraper(API_KEY, 'https://example.com', 'Extract the title');
    console.log('SmartScraper result:', smartResult);
    
    // Test getCredits endpoint
    console.log('\n-- Testing getCredits endpoint --');
    const credits = await getCredits(API_KEY);
    console.log('Credits:', credits);
    
    // Test sendFeedback endpoint
    console.log('\n-- Testing sendFeedback endpoint --');
    const feedback = await sendFeedback(API_KEY, 'mock-request-id', 5, 'Great service!');
    console.log('Feedback result:', feedback);
    
  } catch (error) {
    console.error('Error in basic mock usage:', error.message);
  }
}

/**
 * Mock mode with custom responses
 */
async function mockWithCustomResponses() {
  console.log('\n=== Mock Mode with Custom Responses ===');
  
  // Set custom responses for specific endpoints
  setMockResponses({
    '/v1/credits': {
      remaining_credits: 42,
      total_credits_used: 58,
      custom_field: 'This is a custom response'
    },
    '/v1/smartscraper': () => ({
      request_id: 'custom-mock-request-id',
      custom_data: 'Generated by custom function'
    })
  });
  
  try {
    // Test credits with custom response
    console.log('\n-- Testing credits with custom response --');
    const credits = await getCredits(API_KEY);
    console.log('Custom credits:', credits);
    
    // Test smartScraper with custom response
    console.log('\n-- Testing smartScraper with custom response --');
    const smartResult = await smartScraper(API_KEY, 'https://example.com', 'Extract data');
    console.log('Custom smartScraper result:', smartResult);
    
  } catch (error) {
    console.error('Error in custom responses:', error.message);
  }
}

/**
 * Mock mode with custom handler
 */
async function mockWithCustomHandler() {
  console.log('\n=== Mock Mode with Custom Handler ===');
  
  // Set a custom handler that overrides all responses
  setMockHandler((method, url) => {
    return {
      custom_handler: true,
      method: method,
      url: url,
      timestamp: new Date().toISOString(),
      message: 'This response was generated by a custom handler'
    };
  });
  
  try {
    // Test various endpoints with custom handler
    console.log('\n-- Testing with custom handler --');
    
    const scrapeResult = await scrape(API_KEY, 'https://example.com');
    console.log('Scrape with custom handler:', scrapeResult);
    
    const smartResult = await smartScraper(API_KEY, 'https://example.com', 'Test prompt');
    console.log('SmartScraper with custom handler:', smartResult);
    
    const credits = await getCredits(API_KEY);
    console.log('Credits with custom handler:', credits);
    
  } catch (error) {
    console.error('Error in custom handler:', error.message);
  }
}

/**
 * Per-request mock mode (without global enable)
 */
async function perRequestMockMode() {
  console.log('\n=== Per-Request Mock Mode ===');
  
  // Disable global mock mode
  disableMock();
  
  try {
    // Test individual requests with mock enabled
    console.log('\n-- Testing per-request mock mode --');
    
    const scrapeResult = await scrape(API_KEY, 'https://example.com', { mock: true });
    console.log('Per-request mock scrape:', scrapeResult);
    
    const smartResult = await smartScraper(API_KEY, 'https://example.com', 'Test', null, null, null, null, { mock: true });
    console.log('Per-request mock smartScraper:', smartResult);
    
    const scrapeStatus = await getScrapeRequest(API_KEY, 'test-id', { mock: true });
    console.log('Per-request mock getScrapeRequest:', scrapeStatus);
    
  } catch (error) {
    console.error('Error in per-request mock mode:', error.message);
  }
}

/**
 * Test all available endpoints in mock mode
 */
async function testAllEndpoints() {
  console.log('\n=== Testing All Endpoints in Mock Mode ===');
  
  enableMock();
  
  try {
    // Test all available endpoints
    console.log('\n-- Testing all endpoints --');
    
    // Scrape endpoints
    const scrapeResult = await scrape(API_KEY, 'https://example.com');
    console.log('Scrape:', scrapeResult.request_id ? '‚úÖ' : '‚ùå');
    
    const scrapeStatus = await getScrapeRequest(API_KEY, 'mock-id');
    console.log('GetScrapeRequest:', scrapeStatus.status ? '‚úÖ' : '‚ùå');
    
    // SmartScraper endpoints
    const smartResult = await smartScraper(API_KEY, 'https://example.com', 'Extract title');
    console.log('SmartScraper:', smartResult.request_id ? '‚úÖ' : '‚ùå');
    
    const smartStatus = await getSmartScraperRequest(API_KEY, 'mock-id');
    console.log('GetSmartScraperRequest:', smartStatus.status ? '‚úÖ' : '‚ùå');
    
    // SearchScraper endpoints
    const searchResult = await searchScraper(API_KEY, 'Search for information');
    console.log('SearchScraper:', searchResult.request_id ? '‚úÖ' : '‚ùå');
    
    const searchStatus = await getSearchScraperRequest(API_KEY, 'mock-id');
    console.log('GetSearchScraperRequest:', searchStatus.status ? '‚úÖ' : '‚ùå');
    
    // Markdownify endpoints
    const markdownResult = await markdownify(API_KEY, 'https://example.com');
    console.log('Markdownify:', markdownResult.request_id ? '‚úÖ' : '‚ùå');
    
    const markdownStatus = await getMarkdownifyRequest(API_KEY, 'mock-id');
    console.log('GetMarkdownifyRequest:', markdownStatus.status ? '‚úÖ' : '‚ùå');
    
    // Crawl endpoints
    const crawlResult = await crawl(API_KEY, 'https://example.com');
    console.log('Crawl:', crawlResult.crawl_id ? '‚úÖ' : '‚ùå');
    
    const crawlStatus = await getCrawlRequest(API_KEY, 'mock-id');
    console.log('GetCrawlRequest:', crawlStatus.status ? '‚úÖ' : '‚ùå');
    
    // AgenticScraper endpoints
    const agenticResult = await agenticScraper(API_KEY, 'https://example.com', ['click button']);
    console.log('AgenticScraper:', agenticResult.request_id ? '‚úÖ' : '‚ùå');
    
    const agenticStatus = await getAgenticScraperRequest(API_KEY, 'mock-id');
    console.log('GetAgenticScraperRequest:', agenticStatus.status ? '‚úÖ' : '‚ùå');
    
    // Utility endpoints
    const credits = await getCredits(API_KEY);
    console.log('GetCredits:', credits.remaining_credits ? '‚úÖ' : '‚ùå');
    
    const feedback = await sendFeedback(API_KEY, 'mock-id', 5, 'Great!');
    console.log('SendFeedback:', feedback.status ? '‚úÖ' : '‚ùå');
    
  } catch (error) {
    console.error('Error testing endpoints:', error.message);
  }
}

/**
 * Environment variable activation test
 */
async function testEnvironmentActivation() {
  console.log('\n=== Environment Variable Activation Test ===');
  
  console.log('Current SGAI_MOCK value:', process.env.SGAI_MOCK || 'not set');
  
  // Reinitialize mock config to check environment
  initMockConfig();
  
  try {
    const credits = await getCredits(API_KEY);
    console.log('Credits with env check:', credits);
  } catch (error) {
    console.error('Error in environment test:', error.message);
  }
}

/**
 * Main function to run all examples
 */
async function main() {
  console.log('üß™ ScrapeGraph AI SDK - Mock Mode Examples');
  console.log('==========================================');
  
  try {
    await basicMockUsage();
    await mockWithCustomResponses();
    await mockWithCustomHandler();
    await perRequestMockMode();
    await testAllEndpoints();
    await testEnvironmentActivation();
    
    console.log('\n‚úÖ All mock mode examples completed successfully!');
    
  } catch (error) {
    console.error('\n‚ùå Error running examples:', error.message);
  }
}

// Run the examples
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
